<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Amos的Blog</title>
    <link>/IT%E6%9D%82%E8%B0%88/Framework/spring/</link>
    <description>Recent content in spring on Amos的Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>xiayy860612@126.com (Amos Xia)</managingEditor>
    <webMaster>xiayy860612@126.com (Amos Xia)</webMaster>
    <lastBuildDate>Wed, 20 Jun 2018 11:46:54 +0000</lastBuildDate>
    
	<atom:link href="/IT%E6%9D%82%E8%B0%88/Framework/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring 整体架构</title>
      <link>/IT%E6%9D%82%E8%B0%88/Framework/spring/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Thu, 07 Jun 2018 10:50:02 +0000</pubDate>
      <author>xiayy860612@126.com (Amos Xia)</author>
      <guid>/IT%E6%9D%82%E8%B0%88/Framework/spring/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid>
      <description>核心7大模块:
 Spring Core, 实现了IOC Spring Context Spring AOP Spring DAO Spring ORM, 集成了JPA, MyBatis等 Spring Web Spring Web MVC  </description>
    </item>
    
    <item>
      <title>Spring Boot --- 配置</title>
      <link>/IT%E6%9D%82%E8%B0%88/Framework/spring/%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 06 Jun 2018 13:14:41 +0000</pubDate>
      <author>xiayy860612@126.com (Amos Xia)</author>
      <guid>/IT%E6%9D%82%E8%B0%88/Framework/spring/%E9%85%8D%E7%BD%AE/</guid>
      <description>常用的配置方式, 优先级从高到低:
 命令行参数 系统环境变量 指定环境的profile文件, 主要application-{profile}.properties/yml 通用profile文件, 主要有application.properties/yml文件  profile配置文件  application.properties/yml, 通用配置 application-{profile}.properties/yml 自定义properties  profile配置文件可以放在以下位置, 优先级从高到低:
 resources/config目录 resources根目录  详情见: Application Property Files
通过spring.profiles.active={profile}来加载指定环境的profile配置文件
 spring.profiles.active=dev # 加载application-dev.properties  @Value 使用@Value(&amp;quot;${property_name}&amp;quot;)读取application.properties中的自定义配置
springboot-config.name=hello  // ValuableConfigParam @Component public class ValuableConfigParam { @Value(&amp;quot;${springboot-config.name}&amp;quot;) private String name; }  @ConfigurationProperties 通过指定前缀来自动解析配置
springboot-config.confprop.id=1 springboot-config.confprop.name=test  // ConfigPropertyParams @Component @ConfigurationProperties(prefix = &amp;quot;springboot-config.confprop&amp;quot;) public class ConfigPropertyParams { private Integer id; private String name; }  @PropertySource 读取自定义的配置</description>
    </item>
    
  </channel>
</rss>