<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Amos的Blog</title>
    <link>/IT%E6%9D%82%E8%B0%88/Language/java/</link>
    <description>Recent content in java on Amos的Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>xiayy860612@126.com (Amos Xia)</managingEditor>
    <webMaster>xiayy860612@126.com (Amos Xia)</webMaster>
    <lastBuildDate>Wed, 20 Jun 2018 11:46:54 +0000</lastBuildDate>
    
	<atom:link href="/IT%E6%9D%82%E8%B0%88/Language/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 常用特性</title>
      <link>/IT%E6%9D%82%E8%B0%88/Language/java/Java%E5%B8%B8%E7%94%A8%E7%89%B9%E6%80%A7/</link>
      <pubDate>Wed, 20 Jun 2018 07:31:33 +0000</pubDate>
      <author>xiayy860612@126.com (Amos Xia)</author>
      <guid>/IT%E6%9D%82%E8%B0%88/Language/java/Java%E5%B8%B8%E7%94%A8%E7%89%B9%E6%80%A7/</guid>
      <description>  Annotation 代理 IO NIO 多线程 集合 反射 异常处理机制 网络  Reference  JSR 133 内存模型和线程规范, 中文版   </description>
    </item>
    
    <item>
      <title>Java 类加载</title>
      <link>/IT%E6%9D%82%E8%B0%88/Language/java/%E7%B1%BB%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Fri, 08 Jun 2018 03:02:29 +0000</pubDate>
      <author>xiayy860612@126.com (Amos Xia)</author>
      <guid>/IT%E6%9D%82%E8%B0%88/Language/java/%E7%B1%BB%E5%8A%A0%E8%BD%BD/</guid>
      <description>.class类文件存储了JVM的指令, JVM能够将JVM指令集转换为目标机器的机器语言.
JVM只加载程序执行时所需要的类文件.
类的解析是指加载某个类所以来的所有类的过程.
JVM加载类的大概流程:
 根据加载机制来加载类文件, 可以从本地磁盘, web远程等加载, 把获取到的字节码传递给虚拟机 类的解析 执行main方法 执行过程中加载更多的相关的类  类的加载机制会用到多个类加载器, 每个Java程序至少拥有3个类加载器:
 Bootstrap引导类加载器, 是JVM不可分割的一部分, 用于加载系统类, 通常从jre/lib/rt.jar中进行加载, 这部分加载的系统类没有对应的ClassLoader. Extension扩展类加载器, 从jre/lib/ext加载扩展类, 并且不会根据classpath进行加载类 System系统类加载器(又称应用类加载器), 用于加载开发人员实现的应用类, 从classpath设置的目录或者是jar文件里加载类  // String是系统类, 由Bootstrap加载 String.class.getClassLoader() // null  Extension类加载器和System类加载器都是URLClassLoader的实例.
类加载器有一种父-子关系, 除了Bootstrap类加载器, 每个类加载器都有一个父级的类加载器. 类加载器在加载一个类的时候, 首先交由父级类加载器来进行加载, 当父级类加载器没有找到对应的类时, 才由自己进行加载.
每个线程都有一个对类加载器的引用, 它被称为上下文类加载器. 主线程的上下文类加载器是System类加载器.
新线程创建时的上下文类加载器为创建该线程的上下文类加载器, 即如果没有显式去设定, 则所有线程都会使用System类加载器
 在应用程序代码中, 类是由包和类名来定位 在JVM中, 类是由类的全名(包和类名)和类加载器来确定的.  通过继承ClassLoader来实现自定义的类加载器.
 ClassLoader用于加载单个类 URLClassLoader可以加载类, 也可以加载类目录或者JAR文件  </description>
    </item>
    
    <item>
      <title>String</title>
      <link>/IT%E6%9D%82%E8%B0%88/Language/java/String/</link>
      <pubDate>Wed, 06 Jun 2018 13:12:28 +0000</pubDate>
      <author>xiayy860612@126.com (Amos Xia)</author>
      <guid>/IT%E6%9D%82%E8%B0%88/Language/java/String/</guid>
      <description>字符串由char序列组成, char是采用的UTF-16编码的Unicode码.
String类对象是不可变对象, 对String对象的任何改变都不影响到原对象， 相关的任何change操作都会生成新的对象.
字符串比较:
 ==, 用来比较两个字符串的存储位置是否相同, 即检查是否同一个对象 equals, 用来比较两个字符串的值是否相等  字符串字面量存储在jvm虚拟机的常量池里, 能够快速读取, 只读.
// &amp;quot;hello&amp;quot;为字符串字面量, 存储在jvm的常量池里 String s0 = &amp;quot;hello&amp;quot;;  字符串的构建StringBuffer, StringBuilder String字符串可以通过+, contact来进行拼接生成一个新的String对象
 contact只能拼接字符串 使用+进行字符串拼接时, 不管后者是不是字符串, 总是会被转换为字符串, 但效率低, 会被编译器转换为StringBuilder来进行拼接  String s0 = &amp;quot;hello&amp;quot;; String s1 = s0 + 123; 反编译: 0: ldc #2	// String hello 2: astore_1 3: new #8	// class java/lang/StringBuilder 6: dup 7: invokespecial #9	// Method java/lang/StringBuilder.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V 10: aload_1 11: invokevirtual #10	// Method java/lang/StringBuilder.</description>
    </item>
    
    <item>
      <title>Java实用工具</title>
      <link>/IT%E6%9D%82%E8%B0%88/Language/java/good_tools/</link>
      <pubDate>Thu, 03 May 2018 08:04:53 +0000</pubDate>
      <author>xiayy860612@126.com (Amos Xia)</author>
      <guid>/IT%E6%9D%82%E8%B0%88/Language/java/good_tools/</guid>
      <description> idea  lombok, 编译时自动生成attribute的get/set方法  </description>
    </item>
    
  </channel>
</rss>